/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : HTML Converter
 #	author : miyako
 #	2012/08/27
 #
 # --------------------------------------------------------------------------------*/

#include "functions_qtwk.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{		
		case kInitPlugin:
			_wkhtmltopdf_init(false);
			_wkhtmltoimage_init(false);
			break;
		case kDeinitPlugin:
		//	need to comment this out else bad conversion after reopening the database without quit
		//	_wkhtmltopdf_deinit();
			_wkhtmltoimage_deinit();	
			break;			
// --- Convert

		case 1 :
			HTML_Convert_to_image(pResult, pParams);
			break;

		case 2 :
			HTML_Convert_to_pdf(pResult, pParams);
			break;

	}
}

// ------------------------------------ Convert -----------------------------------


void HTML_Convert_to_image(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT ParamHtml;
	ARRAY_LONGINT ParamKeys;
	ARRAY_TEXT ParamValues;
	C_BLOB returnValue;

	ParamHtml.fromParamAtIndex(pParams, 1);
	ParamKeys.fromParamAtIndex(pParams, 2);
	ParamValues.fromParamAtIndex(pParams, 3);

	CUTF8String paramValue, path;
	
	wkhtmltoimage_global_settings *gs;
	wkhtmltoimage_converter *c;
	
	gs = _wkhtmltoimage_create_global_settings();

	for(unsigned int i = 0; i < ParamKeys.getSize(); ++i){
		
		ParamValues.copyUTF8StringAtIndex(&paramValue, i);
		
		switch (ParamKeys.getIntValueAtIndex(i)){
				
			case HTML_IMAGE_USE_SMART_WIDTH:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltoimage_set_global_setting(gs, "smartWidth", "true");
				}else{
					_wkhtmltoimage_set_global_setting(gs, "smartWidth", "false");	
				}				
				break;
			case HTML_IMAGE_USE_BACKGROUND:
				if(!paramValue.compare((const uint8_t *)"false")){
					_wkhtmltoimage_set_global_setting(gs, "transparent", "true");
				}else{
					_wkhtmltoimage_set_global_setting(gs, "transparent", "false");	
				}				
				break;
			case HTML_IMAGE_CROP_LEFT:
				_wkhtmltoimage_set_global_setting(gs, "crop.left", (const char *)paramValue.c_str());
				break;			
			case HTML_IMAGE_CROP_TOP:
				_wkhtmltoimage_set_global_setting(gs, "crop.top", (const char *)paramValue.c_str());
				break;	
			case HTML_IMAGE_CROP_WIDTH:
				_wkhtmltoimage_set_global_setting(gs, "crop.width", (const char *)paramValue.c_str());
				break;	
			case HTML_IMAGE_CROP_HEIGHT:
				_wkhtmltoimage_set_global_setting(gs, "crop.height", (const char *)paramValue.c_str());
				break;					
			case HTML_IMAGE_JPEG_QUALITY:
				_wkhtmltoimage_set_global_setting(gs, "quality", (const char *)paramValue.c_str());
				break;
			case HTML_IMAGE_SCREEN_WIDTH:
				_wkhtmltoimage_set_global_setting(gs, "screenWidth", (const char *)paramValue.c_str());
				break;				
			case HTML_IMAGE_FORMAT:
				if(   (!paramValue.compare((const uint8_t *)"jpg")) 
				   || (!paramValue.compare((const uint8_t *)"png")) 
				   || (!paramValue.compare((const uint8_t *)"bmp")) 	
				   || (!paramValue.compare((const uint8_t *)"svg"))){
					_wkhtmltoimage_set_global_setting(gs, "fmt", (const char *)paramValue.c_str());
				}
				break;		
		}
		
	}
	
	if(ParamHtml.getUTF16Length()){
		
		CUTF8String htmlPath, html, htmlUrl;
		ParamHtml.copyPath(&htmlPath);
		ParamHtml.copyUTF8String(&htmlUrl);
		
		if(   (htmlUrl.find((const uint8_t *)"http://") == 0) 
		   || (htmlUrl.find((const uint8_t *)"https://") == 0)
		   || (htmlUrl.find((const uint8_t *)"ftp://") == 0)
		   || (htmlUrl.find((const uint8_t *)"ftps://") == 0)){
			
			_wkhtmltoimage_set_global_setting(gs, "in",(const char *)htmlUrl.c_str());	
			c = _wkhtmltoimage_create_converter(gs, NULL);
			
		}else{
			
			if(checkPath(&htmlPath)){
				_wkhtmltoimage_set_global_setting(gs, "in",(const char *)htmlPath.c_str());
				c = _wkhtmltoimage_create_converter(gs, NULL);
			}else{
				ParamHtml.copyUTF8String(&html);
				c = _wkhtmltoimage_create_converter(gs, (const char *)html.c_str());	
			}
			
		}
		
		if(_wkhtmltoimage_convert(c)){
			const unsigned char *bytes;
			long len = _wkhtmltoimage_get_output(c, &bytes);
			returnValue.setBytes((const uint8_t *)bytes, len);
		}
		
	}
	
	_wkhtmltoimage_destroy_converter(c);
	
	returnValue.setReturn(pResult);
}

void HTML_Convert_to_pdf(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT ParamHtml;
	ARRAY_LONGINT ParamKeys;
	ARRAY_TEXT ParamValues;
	C_BLOB returnValue;

	ParamHtml.fromParamAtIndex(pParams, 1);
	ParamKeys.fromParamAtIndex(pParams, 2);
	ParamValues.fromParamAtIndex(pParams, 3);

	CUTF8String paramValue, path;
	
	wkhtmltopdf_global_settings *gs;
	wkhtmltopdf_object_settings *os;
	wkhtmltopdf_converter *c;
	
	gs = _wkhtmltopdf_create_global_settings();
	os = _wkhtmltopdf_create_object_settings();
	
	/*hard code these options
	 http://www.cs.au.dk/~jakobt/libwkhtmltox_0.10.0_doc/pagesettings.html#pagePdfGlobal
	 */
	
	_wkhtmltopdf_set_object_setting(os, "load.blockLocalFileAccess", "false");
	_wkhtmltopdf_set_object_setting(os, "load.stopSlowScript", "true");
	_wkhtmltopdf_set_object_setting(os, "load.debugJavascript", "false");
	_wkhtmltopdf_set_object_setting(os, "load.loadErrorHandling", "ignore");
	_wkhtmltopdf_set_object_setting(os, "includeInOutline", "true");
	
	_wkhtmltopdf_set_global_setting(gs, "outputFormat", "pdf");
	
	for(unsigned int i = 0; i < ParamKeys.getSize(); ++i){
		
		ParamValues.copyUTF8StringAtIndex(&paramValue, i);
		
		switch (ParamKeys.getIntValueAtIndex(i)){
				
			case HTML_USE_BACKGROUND:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.background", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.background", "false");	
				}				
				break;						
			case HTML_USE_IMAGES:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.loadImages", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.loadImages", "false");	
				}				
				break;						
			case HTML_USE_JAVASCRIPT:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.enableJavascript", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.enableJavascript", "false");	
				}				
				break;						
			case HTML_USE_SMART_RESIZE:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.enableIntelligentShrinking", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.enableIntelligentShrinking", "false");	
				}				
				break;										
			case HTML_USE_PRINT_MEDIA:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.printMediaType", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.printMediaType", "false");	
				}				
				break;						
			case HTML_USE_PLUGINS:					
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "web.enablePlugins", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "web.enablePlugins", "false");	
				}				
				break;		
			case HTML_PDF_USE_COMPRESSION:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_global_setting(gs, "useCompression", "true");
				}else{
					_wkhtmltopdf_set_global_setting(gs, "useCompression", "false");	
				}				
				break;						
			case HTML_PDF_USE_OUTLINE:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_global_setting(gs, "outline", "true");
				}else{
					_wkhtmltopdf_set_global_setting(gs, "outline", "false");	
				}				
				break;						
			case HTML_PDF_HEADER_USE_LINE:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "header.line", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "header.line", "false");	
				}				
				break;						
			case HTML_PDF_FOOTER_USE_LINE:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "footer.line", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "footer.line", "false");	
				}				
				break;						
			case HTML_PDF_TOC_USE_DOTTED_LINES:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "toc.useDottedLines", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "toc.useDottedLines", "false");	
				}				
				break;					
			case HTML_PDF_TOC_USE_FORWARD_LINKS:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "toc.forwardLinks", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "toc.forwardLinks", "false");	
				}				
				break;						
			case HTML_PDF_TOC_USE_BACK_LINKS:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "toc.backLinks", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "toc.backLinks", "false");	
				}				
				break;					
			case HTML_PDF_USE_EXTERNAL_LINKS:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "useExternalLinks", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "useExternalLinks", "false");	
				}				
				break;						
			case HTML_PDF_USE_LOCAL_LINKS:	
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "useLocalLinks", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "useLocalLinks", "false");	
				}				
				break;						
			case HTML_PDF_USE_FORMS:
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "produceForms", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "produceForms", "false");	
				}				
				break;					
			case HTML_PDF_USE_PAGES_COUNT:		
				if(!paramValue.compare((const uint8_t *)"true")){
					_wkhtmltopdf_set_object_setting(os, "pagesCount", "true");
				}else{
					_wkhtmltopdf_set_object_setting(os, "pagesCount", "false");	
				}									
				break;
			case HTML_MINIMUM_FONT_SIZE:
				_wkhtmltopdf_set_object_setting(os, "web.minimumFontSize", (const char *)paramValue.c_str());
				break;
			case HTML_DEFAULT_ENCODING:
				_wkhtmltopdf_set_object_setting(os, "web.defaultEncoding", (const char *)paramValue.c_str());
				break;	
			case HTML_ZOOM_FACTOR:
				_wkhtmltopdf_set_object_setting(os, "load.zoomFactor",(const char *)paramValue.c_str());
				break;
			case HTML_PDF_PAPER_SIZE:
				_wkhtmltopdf_set_global_setting(gs, "size.paperSize",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_DOCUMENT_WIDTH:
				_wkhtmltopdf_set_global_setting(gs, "size.width",(const char *)paramValue.c_str());
				break;					
			case HTML_PDF_DOCUMENT_HEIGHT:
				_wkhtmltopdf_set_global_setting(gs, "size.height",(const char *)paramValue.c_str());
				break;						
			case HTML_PDF_DPI:
				_wkhtmltopdf_set_global_setting(gs, "dpi",(const char *)paramValue.c_str());
				break;
			case HTML_PDF_JPEG_QUALITY:
				_wkhtmltopdf_set_global_setting(gs, "imageQuality",(const char *)paramValue.c_str());
				break;					
			case HTML_PDF_IMAGE_DPI:
				_wkhtmltopdf_set_global_setting(gs, "imageDPI",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_ORIENTATION:
				if(   (!paramValue.compare((const uint8_t *)"Landscape")) 
				   || (!paramValue.compare((const uint8_t *)"Portrait"))){
					_wkhtmltopdf_set_global_setting(gs, "orientation", (const char *)paramValue.c_str());
				}
				break;
			case HTML_PDF_COLOR_MODE:
				if(   (!paramValue.compare((const uint8_t *)"Color")) 
				   || (!paramValue.compare((const uint8_t *)"Grayscale"))){
					_wkhtmltopdf_set_global_setting(gs, "colorMode", (const char *)paramValue.c_str());
				}
				break;	
			case HTML_PDF_OUTPUT_FORMAT:
				if(   (!paramValue.compare((const uint8_t *)"pdf")) 
				   || (!paramValue.compare((const uint8_t *)"ps"))){
					_wkhtmltopdf_set_global_setting(gs, "outputFormat", (const char *)paramValue.c_str());
				}
				break;
			case HTML_PDF_MARGIN_RIGHT:
				_wkhtmltopdf_set_global_setting(gs, "margin.right",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_MARGIN_LEFT:
				_wkhtmltopdf_set_global_setting(gs, "margin.left",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_MARGIN_BOTTOM:
				_wkhtmltopdf_set_global_setting(gs, "margin.bottom",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_MARGIN_TOP:
				_wkhtmltopdf_set_global_setting(gs, "margin.top",(const char *)paramValue.c_str());
				break;		
			case HTML_PDF_DOCUMENT_TITLE:
				_wkhtmltopdf_set_global_setting(gs, "documentTitle",(const char *)paramValue.c_str());
				break;
			case HTML_PDF_PAGE_NUMBER_OFFSET:
				_wkhtmltopdf_set_global_setting(gs, "pageOffset",(const char *)paramValue.c_str());
				break;					
			case HTML_PDF_NUMBER_OF_COPIES:
				_wkhtmltopdf_set_global_setting(gs, "copies",(const char *)paramValue.c_str());
				break;					
			case HTML_PDF_OUTLINE_DEPTH:
				_wkhtmltopdf_set_global_setting(gs, "outlineDepth",(const char *)paramValue.c_str());
				break;						
			case HTML_PDF_HEADER_FONT_SIZE:
				_wkhtmltopdf_set_object_setting(os, "header.fontSize",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_HEADER_FONT_NAME:
				_wkhtmltopdf_set_object_setting(os, "header.fontName",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_HEADER_LEFT:
				_wkhtmltopdf_set_object_setting(os, "header.left",(const char *)paramValue.c_str());
				break;		
			case HTML_PDF_HEADER_CENTER:
				_wkhtmltopdf_set_object_setting(os, "header.center",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_HEADER_RIGHT:
				_wkhtmltopdf_set_object_setting(os, "header.right",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_HEADER_SPACE:
				_wkhtmltopdf_set_object_setting(os, "header.space",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_FOOTER_FONT_SIZE:
				_wkhtmltopdf_set_object_setting(os, "footer.fontSize",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_FOOTER_FONT_NAME:
				_wkhtmltopdf_set_object_setting(os, "footer.fontName",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_FOOTER_LEFT:
				_wkhtmltopdf_set_object_setting(os, "footer.left",(const char *)paramValue.c_str());
				break;					
			case HTML_PDF_FOOTER_CENTER:
				_wkhtmltopdf_set_object_setting(os, "footer.center",(const char *)paramValue.c_str());
				break;			
			case HTML_PDF_FOOTER_RIGHT:
				_wkhtmltopdf_set_object_setting(os, "footer.right",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_FOOTER_SPACE:
				_wkhtmltopdf_set_object_setting(os, "footer.space",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_TOC_CAPTION_TEXT:
				_wkhtmltopdf_set_object_setting(os, "toc.captionText",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_TOC_INDENTATION:
				_wkhtmltopdf_set_object_setting(os, "toc.indentation",(const char *)paramValue.c_str());
				break;	
			case HTML_PDF_TOC_FONT_SCALE:
				_wkhtmltopdf_set_object_setting(os, "toc.fontScale",(const char *)paramValue.c_str());
				break;
			case HTML_WEB_USERNAME:
				_wkhtmltopdf_set_object_setting(os, "load.username",(const char *)paramValue.c_str());
				break;
			case HTML_WEB_PASSWORD:
				_wkhtmltopdf_set_object_setting(os, "load.password",(const char *)paramValue.c_str());
				break;					
			case HTML_WEB_PROXY:
				_wkhtmltopdf_set_object_setting(os, "load.proxy",(const char *)paramValue.c_str());
				break;						

			case HTML_PDF_OUTLINE_PATH:
				ParamValues.copyPathAtIndex(&path, i);
				_wkhtmltopdf_set_object_setting(os, "dumpOutline",(const char *)path.c_str());
				break;						
			case HTML_PDF_OUTLINE_XSL_PATH:
		//		ParamValues.copyUTF16StringAtIndex(&path, i);
		//		_wkhtmltopdf_set_object_setting(os, "tocXsl",(const char *)path.c_str());					
				break;			
			case HTML_CUSTOM_CSS_PATH:
				ParamValues.copyPathAtIndex(&path, i);
				_wkhtmltopdf_set_object_setting(os, "web.userStyleSheet",(const char *)path.c_str());					
				break;
			case HTML_COOKIE_JAR_PATH:
				ParamValues.copyPathAtIndex(&path, i);
				_wkhtmltopdf_set_object_setting(os, "load.cookieJar",(const char *)path.c_str());						
				break;
		}
		
	}
	
	c = _wkhtmltopdf_create_converter(gs);
	
	if(ParamHtml.getUTF16Length()){
	
		CUTF8String htmlPath, html, htmlUrl;
		ParamHtml.copyPath(&htmlPath);
		ParamHtml.copyUTF8String(&htmlUrl);
		
		if(   (htmlUrl.find((const uint8_t *)"http://") == 0) 
		   || (htmlUrl.find((const uint8_t *)"https://") == 0)
		   || (htmlUrl.find((const uint8_t *)"ftp://") == 0)
		   || (htmlUrl.find((const uint8_t *)"ftps://") == 0)){
			
			_wkhtmltopdf_set_object_setting(os, "page",(const char *)htmlUrl.c_str());	
			_wkhtmltopdf_add_object(c, os, NULL);
			
		}else{
			
			if(checkPath(&htmlPath)){
				_wkhtmltopdf_set_object_setting(os, "page",(const char *)htmlPath.c_str());	
				_wkhtmltopdf_add_object(c, os, NULL);
			}else{
				ParamHtml.copyUTF8String(&html);
				_wkhtmltopdf_add_object(c, os, (const char *)html.c_str());	
			}
			
		}
		
		if(_wkhtmltopdf_convert(c)){
			const unsigned char *bytes;
			long len = _wkhtmltopdf_get_output(c, &bytes);
			returnValue.setBytes((const uint8_t *)bytes, len);
		}
	
	}
	
	_wkhtmltopdf_destroy_converter(c);
	
	returnValue.setReturn(pResult);
}

#define BUFFER_SIZE 8192

BOOL readPath(CUTF8String *path, CUTF8String *html){
	
	BOOL success = false;
	
	html->clear();
	
#if VERSIONMAC	
	std::ifstream ifs_test((const char *)path->c_str(), std::ios::in|std::ios::binary);
#else
	C_TEXT wpath;
	wpath.setUTF8String(path);
	std::ifstream ifs_test((const wchar_t *)wpath.getUTF16StringPtr(), std::ios::in|std::ios::binary);
#endif
	
	if(ifs_test.is_open()){
		
		std::vector<uint8_t> buf(BUFFER_SIZE);
		
		while(ifs_test.good()){
			
			PA_YieldAbsolute();
			ifs_test.read((char *)&buf[0], BUFFER_SIZE);
			html->append((const uint8_t *)&buf[0], ifs_test.gcount());
			
		}
		
		ifs_test.close();
		success = true;
		
	}
	
	return success;
	
}

BOOL checkPath(CUTF8String *path){
	
	BOOL success = false;
	
#if VERSIONMAC	
	std::ifstream ifs_test((const char *)path->c_str(), std::ios::in|std::ios::binary);
#else
	C_TEXT wpath;
	wpath.setUTF8String(path);
	std::ifstream ifs_test((const wchar_t *)wpath.getUTF16StringPtr(), std::ios::in|std::ios::binary);
#endif
	
	if(ifs_test.is_open()){
		
		ifs_test.close();
		success = true;
		
	}
	
	return success;
	
}